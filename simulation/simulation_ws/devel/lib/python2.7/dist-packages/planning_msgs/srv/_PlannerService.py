# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planning_msgs/PlannerServiceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class PlannerServiceRequest(genpy.Message):
  _md5sum = "6090fe8ab3df1362b8c26859b8850940"
  _type = "planning_msgs/PlannerServiceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/PoseStamped start_pose
geometry_msgs/Vector3 start_velocity
geometry_msgs/PoseStamped goal_pose
geometry_msgs/Vector3 goal_velocity
geometry_msgs/Vector3 bounding_box

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['start_pose','start_velocity','goal_pose','goal_velocity','bounding_box']
  _slot_types = ['geometry_msgs/PoseStamped','geometry_msgs/Vector3','geometry_msgs/PoseStamped','geometry_msgs/Vector3','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_pose,start_velocity,goal_pose,goal_velocity,bounding_box

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlannerServiceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_pose is None:
        self.start_pose = geometry_msgs.msg.PoseStamped()
      if self.start_velocity is None:
        self.start_velocity = geometry_msgs.msg.Vector3()
      if self.goal_pose is None:
        self.goal_pose = geometry_msgs.msg.PoseStamped()
      if self.goal_velocity is None:
        self.goal_velocity = geometry_msgs.msg.Vector3()
      if self.bounding_box is None:
        self.bounding_box = geometry_msgs.msg.Vector3()
    else:
      self.start_pose = geometry_msgs.msg.PoseStamped()
      self.start_velocity = geometry_msgs.msg.Vector3()
      self.goal_pose = geometry_msgs.msg.PoseStamped()
      self.goal_velocity = geometry_msgs.msg.Vector3()
      self.bounding_box = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.start_pose.header.seq, _x.start_pose.header.stamp.secs, _x.start_pose.header.stamp.nsecs))
      _x = self.start_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10d3I.pack(_x.start_pose.pose.position.x, _x.start_pose.pose.position.y, _x.start_pose.pose.position.z, _x.start_pose.pose.orientation.x, _x.start_pose.pose.orientation.y, _x.start_pose.pose.orientation.z, _x.start_pose.pose.orientation.w, _x.start_velocity.x, _x.start_velocity.y, _x.start_velocity.z, _x.goal_pose.header.seq, _x.goal_pose.header.stamp.secs, _x.goal_pose.header.stamp.nsecs))
      _x = self.goal_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d.pack(_x.goal_pose.pose.position.x, _x.goal_pose.pose.position.y, _x.goal_pose.pose.position.z, _x.goal_pose.pose.orientation.x, _x.goal_pose.pose.orientation.y, _x.goal_pose.pose.orientation.z, _x.goal_pose.pose.orientation.w, _x.goal_velocity.x, _x.goal_velocity.y, _x.goal_velocity.z, _x.bounding_box.x, _x.bounding_box.y, _x.bounding_box.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start_pose is None:
        self.start_pose = geometry_msgs.msg.PoseStamped()
      if self.start_velocity is None:
        self.start_velocity = geometry_msgs.msg.Vector3()
      if self.goal_pose is None:
        self.goal_pose = geometry_msgs.msg.PoseStamped()
      if self.goal_velocity is None:
        self.goal_velocity = geometry_msgs.msg.Vector3()
      if self.bounding_box is None:
        self.bounding_box = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.start_pose.header.seq, _x.start_pose.header.stamp.secs, _x.start_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.start_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 92
      (_x.start_pose.pose.position.x, _x.start_pose.pose.position.y, _x.start_pose.pose.position.z, _x.start_pose.pose.orientation.x, _x.start_pose.pose.orientation.y, _x.start_pose.pose.orientation.z, _x.start_pose.pose.orientation.w, _x.start_velocity.x, _x.start_velocity.y, _x.start_velocity.z, _x.goal_pose.header.seq, _x.goal_pose.header.stamp.secs, _x.goal_pose.header.stamp.nsecs,) = _struct_10d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 104
      (_x.goal_pose.pose.position.x, _x.goal_pose.pose.position.y, _x.goal_pose.pose.position.z, _x.goal_pose.pose.orientation.x, _x.goal_pose.pose.orientation.y, _x.goal_pose.pose.orientation.z, _x.goal_pose.pose.orientation.w, _x.goal_velocity.x, _x.goal_velocity.y, _x.goal_velocity.z, _x.bounding_box.x, _x.bounding_box.y, _x.bounding_box.z,) = _struct_13d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.start_pose.header.seq, _x.start_pose.header.stamp.secs, _x.start_pose.header.stamp.nsecs))
      _x = self.start_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10d3I.pack(_x.start_pose.pose.position.x, _x.start_pose.pose.position.y, _x.start_pose.pose.position.z, _x.start_pose.pose.orientation.x, _x.start_pose.pose.orientation.y, _x.start_pose.pose.orientation.z, _x.start_pose.pose.orientation.w, _x.start_velocity.x, _x.start_velocity.y, _x.start_velocity.z, _x.goal_pose.header.seq, _x.goal_pose.header.stamp.secs, _x.goal_pose.header.stamp.nsecs))
      _x = self.goal_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d.pack(_x.goal_pose.pose.position.x, _x.goal_pose.pose.position.y, _x.goal_pose.pose.position.z, _x.goal_pose.pose.orientation.x, _x.goal_pose.pose.orientation.y, _x.goal_pose.pose.orientation.z, _x.goal_pose.pose.orientation.w, _x.goal_velocity.x, _x.goal_velocity.y, _x.goal_velocity.z, _x.bounding_box.x, _x.bounding_box.y, _x.bounding_box.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start_pose is None:
        self.start_pose = geometry_msgs.msg.PoseStamped()
      if self.start_velocity is None:
        self.start_velocity = geometry_msgs.msg.Vector3()
      if self.goal_pose is None:
        self.goal_pose = geometry_msgs.msg.PoseStamped()
      if self.goal_velocity is None:
        self.goal_velocity = geometry_msgs.msg.Vector3()
      if self.bounding_box is None:
        self.bounding_box = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.start_pose.header.seq, _x.start_pose.header.stamp.secs, _x.start_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.start_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 92
      (_x.start_pose.pose.position.x, _x.start_pose.pose.position.y, _x.start_pose.pose.position.z, _x.start_pose.pose.orientation.x, _x.start_pose.pose.orientation.y, _x.start_pose.pose.orientation.z, _x.start_pose.pose.orientation.w, _x.start_velocity.x, _x.start_velocity.y, _x.start_velocity.z, _x.goal_pose.header.seq, _x.goal_pose.header.stamp.secs, _x.goal_pose.header.stamp.nsecs,) = _struct_10d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 104
      (_x.goal_pose.pose.position.x, _x.goal_pose.pose.position.y, _x.goal_pose.pose.position.z, _x.goal_pose.pose.orientation.x, _x.goal_pose.pose.orientation.y, _x.goal_pose.pose.orientation.z, _x.goal_pose.pose.orientation.w, _x.goal_velocity.x, _x.goal_velocity.y, _x.goal_velocity.z, _x.bounding_box.x, _x.bounding_box.y, _x.bounding_box.z,) = _struct_13d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10d3I = struct.Struct("<10d3I")
_struct_3I = struct.Struct("<3I")
_struct_13d = struct.Struct("<13d")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planning_msgs/PlannerServiceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import planning_msgs.msg

class PlannerServiceResponse(genpy.Message):
  _md5sum = "6901798f4fe8af616256b39b5ffdd5e6"
  _type = "planning_msgs/PlannerServiceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
uint8 PLANNINGSUCCESS=1
uint8 PLANNINGFAILED=2

uint8 status
PlanningResponse plan



================================================================================
MSG: planning_msgs/PlanningResponse
float64[] path # m x n matrix
float64[] time # n vector with times
int32 number_primitives  # = n
int32 waypoint_type #polynom, pose etc.
"""
  # Pseudo-constants
  PLANNINGSUCCESS = 1
  PLANNINGFAILED = 2

  __slots__ = ['status','plan']
  _slot_types = ['uint8','planning_msgs/PlanningResponse']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,plan

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlannerServiceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.plan is None:
        self.plan = planning_msgs.msg.PlanningResponse()
    else:
      self.status = 0
      self.plan = planning_msgs.msg.PlanningResponse()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.status))
      length = len(self.plan.path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.plan.path))
      length = len(self.plan.time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.plan.time))
      _x = self
      buff.write(_struct_2i.pack(_x.plan.number_primitives, _x.plan.waypoint_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.plan is None:
        self.plan = planning_msgs.msg.PlanningResponse()
      end = 0
      start = end
      end += 1
      (self.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.plan.path = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.plan.time = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.plan.number_primitives, _x.plan.waypoint_type,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.status))
      length = len(self.plan.path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.plan.path.tostring())
      length = len(self.plan.time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.plan.time.tostring())
      _x = self
      buff.write(_struct_2i.pack(_x.plan.number_primitives, _x.plan.waypoint_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.plan is None:
        self.plan = planning_msgs.msg.PlanningResponse()
      end = 0
      start = end
      end += 1
      (self.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.plan.path = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.plan.time = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.plan.number_primitives, _x.plan.waypoint_type,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_2i = struct.Struct("<2i")
class PlannerService(object):
  _type          = 'planning_msgs/PlannerService'
  _md5sum = 'e7bc30e0b0a79c76a0ad1244f8818092'
  _request_class  = PlannerServiceRequest
  _response_class = PlannerServiceResponse
