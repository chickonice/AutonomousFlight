#include <ros/ros.h>
#include <std_msgs/String.h> 
#include <stdio.h>
#include <geometry_msgs/PoseStamped.h>
#include <math.h>
#include <sensor_msgs/Imu.h>
#include <send_pos/tf_datatypes.h>

using namespace std;

geometry_msgs::PoseStamped ModifiedPoseStamped;

sensor_msgs::Imu init_imu;

double init_roll, init_pitch, init_yaw;

void EstimatorMessageReceived(const geometry_msgs::PoseStamped& poseMsg) {

	//make adjustment for compass yaw
	
	
	//compensate for incorrect rotation by mavros	
}



int main(int argc, char **argv)
{
   ros::init(argc, argv, "modify_pos");
   ros::NodeHandle n;
   ros::Publisher modify_pos_pub = n.advertise<geometry_msgs::PoseStamped>("/mavros/mocap/pose",100);
   ros::Subscriber sub_estimator_pos = n.subscribe("/estimator/pose", 1000, &EstimatorMessageReceived);	
   ros::Subscriber sub_desired_pos = n.subscribe("/planner/pose", 1000, &PlannerMessageReceived);	   

   init_imu = *(ros::topic::waitForMessage<sensor_msgs::Imu>("/mavros/imu/data", ros::Duration(10)));
   
   tf::Quaternion quat(init_imu.orientation.x, init_imu.orientation.y, init_imu.orientation.z, init_imu.orientation.w);
   tf::Matrix3x3 m(quat);
   m.getRPY(init_roll, init_pitch, init_yaw);

   ros::Rate loop_rate(10);
   ros::spinOnce();

   cout << init_yaw*57.3 << endl;

   while(ros::ok()){



   }

}
